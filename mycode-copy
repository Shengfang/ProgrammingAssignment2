## Below is a pair of functions that cache computational results so that
## next time when the same results are needed again, R does not need to 
## re-computate but instead, just get results from the cache. This will
## help release the working load for R and make things faster. 

## In this function, makeCacheMatrix creats a vector containing a list of
## functions. They are: setting/getting value of vector and setting/
## getting value of the matrix inverse. 

makeCacheMatrix <- function(x = matrix()) {
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setinverse <- function(solve) m<<- solve
  getinverse <- function() m
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}


## In this function, it first check if an inverse calculation has been 
## already calculated or not. If yes, it directly get the result from 
## the cache and skip computation. If no, it calculates the inverse in
## the cache.

cacheSolve <- function(x, ...) {
        m <- x$getinverse()
        if(!is.null(m)) {
          message("getting cached data")
          return(m)
        }
        data <- x$get()
        m <- solve(data,...)
        x$setinverse(m)
        m
}
